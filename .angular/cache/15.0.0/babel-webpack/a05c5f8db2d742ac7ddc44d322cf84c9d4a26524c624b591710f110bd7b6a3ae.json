{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport { CData } from '../Data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChartsComponent {\n  constructor(http) {\n    this.http = http;\n    this.dataArray = [];\n    this.monthsArray = [];\n    this.valuesCountry = [{}];\n    this.http.get('assets/formatted_data.csv', {\n      responseType: 'text'\n    }).subscribe(data => {\n      let csvToRowArray = data.split(\"\\n\");\n      for (let index = 1; index < csvToRowArray.length - 1; index++) {\n        let row = csvToRowArray[index].split(\",\");\n        this.dataArray.push(new CData(parseInt(row[0]), row[1], row[2], parseInt(row[3])));\n        this.monthsArray.indexOf(row[2]) === -1 ? this.monthsArray.push(row[2]) : console.log(\"This item already exists\");\n        if (this.monthsArray.indexOf(row[2]) === -1) {\n          this.monthsArray.push(row[2]);\n          if (this.valuesCountry.indexOf(row[0]) === -1) {}\n        } else {}\n      }\n      console.log(this.monthsArray.length);\n      this.createChart(this.monthsArray);\n    }, error => {\n      console.log(error);\n    });\n  }\n  ngOnInit() {\n    // this.createChart(this.monthsArray);\n    console.log(this.monthsArray.length);\n  }\n  createChart(months) {\n    this.chart = new Chart(\"MyChart\", {\n      type: 'bar',\n      data: {\n        labels: months,\n        datasets: [{\n          label: \"Sales\",\n          data: ['467', '576', '572', '79', '92', '574', '573', '576'],\n          backgroundColor: 'blue'\n        }, {\n          label: \"Profit\",\n          data: ['542', '542', '536', '327', '17', '0.00', '538', '541'],\n          backgroundColor: 'limegreen'\n        }]\n      },\n      options: {\n        aspectRatio: 2.5\n      }\n    });\n  }\n  static #_ = this.ɵfac = function ChartsComponent_Factory(t) {\n    return new (t || ChartsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartsComponent,\n    selectors: [[\"app-charts\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[1, \"container\"], [\"id\", \"MyChart\"]],\n    template: function ChartsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Insights\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3, \"Below insights of highest country:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 0)(5, \"canvas\", 1);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.chart);\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}","map":{"version":3,"mappings":"AACA,OAAOA,KAAK,MAAM,eAAe;AACjC,SAASC,KAAK,QAAQ,SAAS;;;AAU/B,OAAM,MAAOC,eAAe;EAM1BC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAJjB,cAAS,GAAiB,EAAE;IAC5B,gBAAW,GAAkB,EAAE;IAC/B,kBAAa,GAAQ,CAAC,EAAE,CAAC;IAG9B,IAAI,CAACA,IAAI,CAACC,GAAG,CAAC,2BAA2B,EAAE;MAACC,YAAY,EAAE;IAAM,CAAC,CAAC,CACjEC,SAAS,CACNC,IAAI,IAAG;MACH,IAAIC,aAAa,GAAGD,IAAI,CAACE,KAAK,CAAC,IAAI,CAAC;MACpC,KAAK,IAAIC,KAAK,GAAG,CAAC,EAAEA,KAAK,GAAGF,aAAa,CAACG,MAAM,GAAG,CAAC,EAAED,KAAK,EAAE,EAAE;QAC7D,IAAIE,GAAG,GAAGJ,aAAa,CAACE,KAAK,CAAC,CAACD,KAAK,CAAC,GAAG,CAAC;QACzC,IAAI,CAACI,SAAS,CAACC,IAAI,CAAC,IAAId,KAAK,CAAEe,QAAQ,CAAEH,GAAG,CAAC,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEA,GAAG,CAAC,CAAC,CAAC,EAAEG,QAAQ,CAACH,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACpF,IAAI,CAACI,WAAW,CAACC,OAAO,CAACL,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,GAAG,IAAI,CAACI,WAAW,CAACF,IAAI,CAACF,GAAG,CAAC,CAAC,CAAC,CAAC,GAAGM,OAAO,CAACC,GAAG,CAAC,0BAA0B,CAAC;QACjH,IAAI,IAAI,CAACH,WAAW,CAACC,OAAO,CAACL,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAC;UAC1C,IAAI,CAACI,WAAW,CAACF,IAAI,CAACF,GAAG,CAAC,CAAC,CAAC,CAAC;UAC7B,IAAI,IAAI,CAACQ,aAAa,CAACH,OAAO,CAACL,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,EAAC;SAI/C,MAAK;;MAKRM,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAACL,MAAM,CAAC;MACpC,IAAI,CAACU,WAAW,CAAC,IAAI,CAACL,WAAW,CAAC;IACtC,CAAC,EACDM,KAAK,IAAG;MACJJ,OAAO,CAACC,GAAG,CAACG,KAAK,CAAC;IACtB,CAAC,CACJ;EACH;EAEAC,QAAQ;IACN;IAEAL,OAAO,CAACC,GAAG,CAAC,IAAI,CAACH,WAAW,CAACL,MAAM,CAAC;EAGtC;EAEAU,WAAW,CAACG,MAAgB;IAI1B,IAAI,CAACC,KAAK,GAAG,IAAI1B,KAAK,CAAC,SAAS,EAAE;MAChC2B,IAAI,EAAE,KAAK;MAEXnB,IAAI,EAAE;QACJoB,MAAM,EAAEH,MAAM;QACdI,QAAQ,EAAE,CACR;UACEC,KAAK,EAAE,OAAO;UACdtB,IAAI,EAAE,CAAC,KAAK,EAAC,KAAK,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EACxC,KAAK,EAAE,KAAK,EAAE,KAAK,CAAC;UACjBuB,eAAe,EAAE;SAClB,EACD;UACED,KAAK,EAAE,QAAQ;UACftB,IAAI,EAAE,CAAC,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,KAAK,EAAE,IAAI,EACzC,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC;UACnBuB,eAAe,EAAE;SAClB;OAEJ;MACDC,OAAO,EAAE;QACPC,WAAW,EAAC;;KAGf,CAAC;EACJ;EAAC;qBAxEU/B,eAAe;EAAA;EAAA;UAAfA,eAAe;IAAAgC;IAAAC;IAAAC;IAAAC;IAAAC;MAAA;QCZ5BC,0BAAI;QAAAA,wBAAQ;QAAAA,iBAAK;QACjBA,yBAAG;QAAAA,kDAAkC;QAAAA,iBAAI;QAEzCA,8BAAuB;QACIA,YAAW;QAAAA,iBAAS;;;QAApBA,eAAW;QAAXA,+BAAW","names":["Chart","CData","ChartsComponent","constructor","http","get","responseType","subscribe","data","csvToRowArray","split","index","length","row","dataArray","push","parseInt","monthsArray","indexOf","console","log","valuesCountry","createChart","error","ngOnInit","months","chart","type","labels","datasets","label","backgroundColor","options","aspectRatio","selectors","decls","vars","consts","template","i0"],"sourceRoot":"","sources":["/Users/answaza/Desktop/scrapingPy/dashboardApp/src/app/charts/charts.component.ts","/Users/answaza/Desktop/scrapingPy/dashboardApp/src/app/charts/charts.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport Chart from 'chart.js/auto';\nimport { CData } from '../Data';\nimport { HttpClient } from \"@angular/common/http\";\n\n\n@Component({\n  selector: 'app-charts',\n  templateUrl: './charts.component.html',\n  styleUrls: ['./charts.component.css']\n})\n\nexport class ChartsComponent implements OnInit {\n  public chart: any;\n  public dataArray: Array<CData> = [];\n  public monthsArray: Array<string> = [];\n  public valuesCountry: [{}] =[{}]\n\n  constructor(private http: HttpClient){\n    this.http.get('assets/formatted_data.csv', {responseType: 'text'})\n    .subscribe(\n        data => {\n            let csvToRowArray = data.split(\"\\n\");\n            for (let index = 1; index < csvToRowArray.length - 1; index++) {\n              let row = csvToRowArray[index].split(\",\");\n              this.dataArray.push(new CData( parseInt( row[0]), row[1], row[2], parseInt(row[3])));\n              this.monthsArray.indexOf(row[2]) === -1 ? this.monthsArray.push(row[2]) : console.log(\"This item already exists\");\n              if (this.monthsArray.indexOf(row[2]) === -1){\n                this.monthsArray.push(row[2])\n                if (this.valuesCountry.indexOf(row[0]) === -1){\n\n                }\n\n              }else {\n\n              }\n            }\n            \n            console.log(this.monthsArray.length)\n            this.createChart(this.monthsArray);\n        },\n        error => {\n            console.log(error);\n        }\n    );\n  }\n\n  ngOnInit(): void {\n    // this.createChart(this.monthsArray);\n\n    console.log(this.monthsArray.length)\n    \n    \n  }\n\n  createChart(months: string[]){\n    \n\n\n    this.chart = new Chart(\"MyChart\", {\n      type: 'bar', //this denotes tha type of chart\n\n      data: {// values on X-Axis\n        labels: months, \n\t       datasets: [\n          {\n            label: \"Sales\",\n            data: ['467','576', '572', '79', '92',\n\t\t\t\t\t\t\t\t '574', '573', '576'],\n            backgroundColor: 'blue'\n          },\n          {\n            label: \"Profit\",\n            data: ['542', '542', '536', '327', '17',\n\t\t\t\t\t\t\t\t\t '0.00', '538', '541'],\n            backgroundColor: 'limegreen'\n          }  \n        ]\n      },\n      options: {\n        aspectRatio:2.5\n      }\n      \n    });\n  }\n}\n\n","<h2>Insights</h2>\n<p>Below insights of highest country:</p>\n\n<div class=\"container\">\n    <canvas  id=\"MyChart\" >{{ chart }}</canvas>\n  </div>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}