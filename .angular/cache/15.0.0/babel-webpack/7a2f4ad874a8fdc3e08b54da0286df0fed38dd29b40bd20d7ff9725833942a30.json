{"ast":null,"code":"import Chart from 'chart.js/auto';\nimport { CData } from '../Data';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ChartsComponent {\n  constructor(http) {\n    this.http = http;\n    this.dataArray = [];\n    this.monthsArray = [];\n    this.valuesCountry = [];\n    this.http.get('assets/formatted_data.csv', {\n      responseType: 'text'\n    }).subscribe(data => {\n      let csvToRowArray = data.split(\"\\n\");\n      for (let index = 1; index < csvToRowArray.length - 1; index++) {\n        let row = csvToRowArray[index].split(\",\");\n        this.dataArray.push(new CData(parseInt(row[0]), row[1], row[2], parseInt(row[3])));\n        // this.monthsArray.indexOf(row[2]) === -1 ? this.monthsArray.push(row[2]) : console.log(\"This item already exists\");\n        if (this.monthsArray.indexOf(row[2]) === -1) {\n          this.monthsArray.push(row[2]);\n          if (this.valuesCountry.find(o => o.label === row[1])) {\n            console.log(row[1] + ' exists');\n            this.valuesCountry.push(new DatasetObj(row[1], [Number.parseInt(row[3])], \"blue\"));\n          } else {\n            console.log(row[1] + ' not exists');\n          }\n        } else {}\n      }\n      console.log(this.monthsArray.length);\n      this.createChart(this.monthsArray);\n    }, error => {\n      console.log(error);\n    });\n  }\n  ngOnInit() {\n    // this.createChart(this.monthsArray);\n    console.log(this.chart);\n    console.log('hhh');\n  }\n  createChart(months) {\n    this.chart = new Chart(\"MyChart\", {\n      type: 'bar',\n      data: {\n        labels: months,\n        datasets: [{\n          label: 'KSA',\n          data: [100, 222, 11],\n          backgroundColor: 'blue'\n        }]\n      },\n      options: {\n        aspectRatio: 2.5\n      }\n    });\n    console.log(this.valuesCountry);\n    this.updateChart();\n  }\n  updateChart() {\n    this.chart.data.datasets = this.valuesCountry; // Would update the first dataset's value of 'March' to be 50\n    this.chart.update();\n  }\n  static #_ = this.ɵfac = function ChartsComponent_Factory(t) {\n    return new (t || ChartsComponent)(i0.ɵɵdirectiveInject(i1.HttpClient));\n  };\n  static #_2 = this.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n    type: ChartsComponent,\n    selectors: [[\"app-charts\"]],\n    decls: 7,\n    vars: 1,\n    consts: [[\"ng-init\", \"init()\", 1, \"container\"], [\"id\", \"MyChart\"]],\n    template: function ChartsComponent_Template(rf, ctx) {\n      if (rf & 1) {\n        i0.ɵɵelementStart(0, \"h2\");\n        i0.ɵɵtext(1, \"Insights\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(2, \"p\");\n        i0.ɵɵtext(3, \"Below insights of highest country:\");\n        i0.ɵɵelementEnd();\n        i0.ɵɵelementStart(4, \"div\", 0)(5, \"canvas\", 1);\n        i0.ɵɵtext(6);\n        i0.ɵɵelementEnd()();\n      }\n      if (rf & 2) {\n        i0.ɵɵadvance(6);\n        i0.ɵɵtextInterpolate(ctx.chart);\n      }\n    },\n    styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n  });\n}\nexport class DatasetObj {\n  constructor(label, data, background) {\n    this.label = label, this.data = data, this.background = background;\n  }\n}","map":{"version":3,"mappings":"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","names":["Chart","CData","ChartsComponent","constructor","http","get","responseType","subscribe","data","csvToRowArray","split","index","length","row","dataArray","push","parseInt","monthsArray","indexOf","valuesCountry","find","o","label","console","log","DatasetObj","Number","createChart","error","ngOnInit","chart","months","type","labels","datasets","backgroundColor","options","aspectRatio","updateChart","update","selectors","decls","vars","consts","template","i0","background"],"sourceRoot":"","sources":["/Users/answaza/Desktop/scrapingPy/dashboardApp/src/app/charts/charts.component.ts","/Users/answaza/Desktop/scrapingPy/dashboardApp/src/app/charts/charts.component.html"],"sourcesContent":["import { Component, Input, OnInit } from '@angular/core';\nimport Chart, { ChartDataset, Colors } from 'chart.js/auto';\nimport { CData } from '../Data';\nimport { HttpClient } from \"@angular/common/http\";\n\n\n@Component({\n  selector: 'app-charts',\n  templateUrl: './charts.component.html',\n  styleUrls: ['./charts.component.css']\n})\n\nexport class ChartsComponent implements OnInit {\n  public chart: any;\n  public dataArray: Array<CData> = [];\n  public monthsArray: Array<string> = [];\n  public valuesCountry: Array<DatasetObj> =[]\n\n  constructor(private http: HttpClient){\n    this.http.get('assets/formatted_data.csv', {responseType: 'text'})\n    .subscribe(\n        data => {\n            let csvToRowArray = data.split(\"\\n\");\n            for (let index = 1; index < csvToRowArray.length - 1; index++) {\n              let row = csvToRowArray[index].split(\",\");\n              this.dataArray.push(new CData( parseInt( row[0]), row[1], row[2], parseInt(row[3])));\n              // this.monthsArray.indexOf(row[2]) === -1 ? this.monthsArray.push(row[2]) : console.log(\"This item already exists\");\n              \n              if (this.monthsArray.indexOf(row[2]) === -1){\n                this.monthsArray.push(row[2])\n                if (this.valuesCountry.find(o => o.label === row[1])){\n                  console.log(row[1]+ ' exists')\n                  this.valuesCountry.push(new DatasetObj(row[1],[Number.parseInt(row[3]) ],\"blue\"));\n                }else{\n                  console.log(row[1]+ ' not exists')\n                  \n                }\n\n                \n\n              }else {\n\n              }\n            }\n            \n            console.log(this.monthsArray.length)\n            this.createChart(this.monthsArray);\n        },\n        error => {\n            console.log(error);\n        }\n    );\n\n    \n  }\n\n  ngOnInit(): void {\n    // this.createChart(this.monthsArray);\n\n    console.log(this.chart)\n \n    \n      console.log('hhh');\n  \n\n    \n  }\n\n  \n\n  createChart(months: string[]){\n    \n\n\n    this.chart = new Chart(\"MyChart\", {\n      type: 'bar', //this denotes tha type of chart\n\n      data: {// values on X-Axis\n        labels: months, \n\t       datasets: [{\n          label: 'KSA',\n          data: [100,222,11],\n          backgroundColor: 'blue'\n         }]\n      },\n      options: {\n        aspectRatio:2.5\n      }\n      \n    });\n\n    console.log(this.valuesCountry)\n    this.updateChart()\n  }\n\n  updateChart() {\n    this.chart.data.datasets = this.valuesCountry; // Would update the first dataset's value of 'March' to be 50\n      this.chart.update(); \n  }\n  \n}\n\n export class DatasetObj {\n  label: String;\n  data: number[];\n  background: String;\n\n  constructor(label: String, data: number[], background: string){\n    this.label = label,\n    this.data = data,\n    this.background = background\n  }\n}\n","<h2>Insights</h2>\n<p>Below insights of highest country:</p>\n\n<div class=\"container\" ng-init=\"init()\">\n    <canvas  id=\"MyChart\" >{{ chart }}</canvas>\n  </div>\n\n\n<script type=\"text/javascript\">\n    console.log('hhh');\n    $(document).ready( function () {\n        const myChart = new Chart.getChart(\"MyChart\");\n\n        myChart.data.datasets[0].data[2] = 50000; // Would update the first dataset's value of 'March' to be 50\n        myChart.update(); \n\n      console.log('hhh');\n  } );\n</script>\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}